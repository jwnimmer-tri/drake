"""A tool that automates our upkeep of `png_drake_vendor.h`.

The upstream build system for libpng has a complicated mechanism to manage its
ABI, centered around munging png.h and pngpriv.h through the preprocessor with
some magic macros defined, and then feeding that output to a giant awk program
to turn it into some kind of a symbol table header file thing.

In the Drake build, we don't want to figure out how to call the preprocessor
the right way, nor to we want to depend on awk. Instead, we have this script
to generate the necessary header file by hand.

We commit this tool's output into Drake's source tree, and then have linter
checks to make sure the generated header is up to date (--action=check).

When an update is required, developers can run it using --action=update.
"""

import argparse
import pathlib
import re
import sys

from bazel_tools.tools.python.runfiles import runfiles

MY_DIRECTORY = "tools/workspace/libpng_internal"


def _generate_png_drake_vendor_h():
    """Scrapes the libpng for symbols that need vendoring, and returns the
    content of png_drake_vendor.h to accomplish that goal.
    """
    header_text = ""
    for name in ["png.h", "pngpriv.h"]:
        with open(f"external/libpng_internal/{name}", encoding="utf-8") as f:
            header_text += f.read()
    header_lines = header_text.splitlines()

    # Find lines that define symbols, e.g.:
    #
    #  PNG_EXPORT(178, void, png_read_png, ...
    #  PNG_INTERNAL_FUNCTION(png_voidp,png_realloc_array,...
    #
    # All such lines start with "PNG_" and end with balanced parens.
    symbols = []
    while header_lines:
        line = header_lines.pop(0)
        if not line.startswith("PNG_"):
            continue
        # Grab more lines until we've matched the parens.
        while not line.count("(") == line.count(")"):
            more = header_lines.pop(0)
            assert not more.startswith("PNG_"), more
            line = line + " " + more
        # Inspect the arguments inside the macro's parens. The first argument
        # is optionally a number token; then comes the type, and then the name.
        args = line[line.index("(")+1:line.rindex(")")].split(",")
        if args[0].isnumeric():
            args.pop(0)
        name = args[1].strip()
        assert name, (args, line)
        # Sometimes an (unwanted) preprocessor name sneaks in.
        if name.isupper():
            continue
        # Work around one weird function name.
        if name == "(PNGCAPI *png_longjmp_ptr)":
            name = "png_longjmp_ptr"
        symbols.append(name)

    # Generate the Drake header.
    result = [
        "#pragma once",
        "",
        "/* The following are Drake's adjustments to libpng. */",
        "/* This file is automatically generated by png_drake_vendor.py. */",
        "",
        "/* Always use the macros, never the slow out-of-line functions. */",
        "#undef PNG_READ_INT_FUNCTIONS_SUPPORTED",
        "",
        "/* Use symbol names prefixed with 'drake_vendor_'. */",
    ]
    for name in sorted(symbols):
        result.append(f"#define {name} drake_vendor_{name}")
    return "\n".join(result) + "\n"


def main():
    manifest = runfiles.Create()
    parser = argparse.ArgumentParser()
    parser.add_argument("--action", choices=["check", "update"], required=True)
    args = parser.parse_args()

    expected = _generate_png_drake_vendor_h()
    actual_path = pathlib.Path(manifest.Rlocation(
        f"drake/{MY_DIRECTORY}/png_drake_vendor.h"))

    if args.action == "check":
        with open(actual_path, encoding="utf-8") as f:
            actual = f.read()
        if actual != expected:
            print("ERROR: png_drake_vendor.h needs update; fix via:")
            print(f" bazel run //{MY_DIRECTORY}:png_drake_vendor -- "
                  "--action=update")
            sys.exit(1)
    else:
        resolved_path = actual_path.resolve()
        with open(resolved_path, "w", encoding="utf-8") as f:
            f.write(expected)
        print(f"INFO: Successfully updated {resolved_path}")


assert __name__ == "__main__"
main()
