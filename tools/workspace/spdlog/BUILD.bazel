load("@bazel_skylib//lib:selects.bzl", "selects")
load("@bazel_skylib//rules:common_settings.bzl", "bool_flag")
load("//tools/install:install.bzl", "install", "install_license")
load("//tools/lint:lint.bzl", "add_lint_tests")
load("//tools/skylark:cc.bzl", "cc_library")
load("//tools/skylark:drake_cc.bzl", "cc_nolink_library")

# All of the targets in this directory are labeled with `tags = ["manual"]`,
# because we want to avoid compiling spdlog during `build //...` when text
# logging to spdlog is disabled. The targets will be built as-needed by code
# that needs them when text_logging is set to use spdlog.

config_setting(
    name = "flag_text_logging_spdlog",
    flag_values = {
        "//tools/flags:text_logging": "spdlog",
    },
)

# ---- Logic for choosing which spdlog to use. ---

config_setting(
    name = "flag_spdlog_repo_pkgconfig",
    flag_values = {
        "//tools/flags:spdlog_repo": "pkgconfig",
    },
)

config_setting(
    name = "flag_spdlog_repo_default",
    flag_values = {
        "//tools/flags:spdlog_repo": "default",
    },
)

config_setting(
    name = "flag_public_repo_default_pkgconfig",
    flag_values = {
        "//tools/flags:public_repo_default": "pkgconfig",
    },
)

selects.config_setting_group(
    name = "flag_spdlog_repo_default_pkgconfig",
    match_all = [
        ":flag_spdlog_repo_default",
        ":flag_public_repo_default_pkgconfig",
    ],
)

selects.config_setting_group(
    name = "use_pkgconfig",
    match_any = [
        ":flag_spdlog_repo_pkgconfig",
        ":flag_spdlog_repo_default_pkgconfig",
    ],
)

cc_library(
    name = "spdlog",
    defines = select({
        # DRAKE DEPRECATED: This preprocessor definition is deprecated for
        # removal; it will be removed from Drake on or after 2026-02-01.
        ":flag_text_logging_spdlog": ["HAVE_SPDLOG"],
        "//conditions:default": [],
    }),
    tags = [
        "manual",
        "nolint",
    ],
    visibility = ["//visibility:public"],
    deps = select({
        ":use_pkgconfig": ["@pkgconfig_spdlog_internal"],
        "//conditions:default": ["@module_spdlog//:spdlog"],
    }),
)

# ---- Logic for installing spdlog-related files. ---

bool_flag(
    name = "with_user_spdlog",
    # This is overridden by our CMakeLists.txt to match the CMake option.
    build_setting_default = False,
)

config_setting(
    name = "is_with_user_true",
    flag_values = {":with_user_spdlog": "True"},
)

selects.config_setting_group(
    name = "is_external",
    match_any = [
        ":is_with_user_true",
        ":use_pkgconfig",
    ],
)

cc_nolink_library(
    name = "hdrs",
    tags = ["manual"],
    visibility = ["//tools/install/libdrake:__pkg__"],
    deps = ["@spdlog"],
)

cc_library(
    name = "shared_library_maybe",
    tags = ["manual"],
    visibility = ["//tools/install/libdrake:__pkg__"],
    deps = select({
        ":is_external": ["@spdlog"],
        "//conditions:default": [],
    }),
)

install(
    name = "install_hdrs",
    tags = ["manual"],
    targets = [":hdrs"],
    hdr_dest = "include",
    hdr_strip_prefix = ["include"],
    guess_hdrs = "ALLOWED_EXTERNALS",
    allowed_externals = ["@module_spdlog//:spdlog"],
)

install_license(
    name = "install_license",
    doc_dest = "share/doc/spdlog",
    licenses = ["@module_spdlog//:license"],
    tags = ["manual"],
)

install(
    name = "install",
    tags = ["manual"],
    visibility = ["//tools/workspace:__pkg__"],
    deps = select({
        ":is_external": [],
        "//conditions:default": [
            ":install_hdrs",
            ":install_license",
        ],
    }),
)

add_lint_tests()
